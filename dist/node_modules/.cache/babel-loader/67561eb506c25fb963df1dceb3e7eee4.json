{"remainingRequest":"D:\\1Node.js高级资料\\dist\\node_modules\\babel-loader\\lib\\index.js!D:\\1Node.js高级资料\\dist\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\1Node.js高级资料\\dist\\src\\store\\modules\\car.js","dependencies":[{"path":"D:\\1Node.js高级资料\\dist\\src\\store\\modules\\car.js","mtime":1575538865000},{"path":"D:\\1Node.js高级资料\\dist\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575538845000},{"path":"D:\\1Node.js高级资料\\dist\\node_modules\\babel-loader\\lib\\index.js","mtime":1575538845000},{"path":"D:\\1Node.js高级资料\\dist\\node_modules\\eslint-loader\\index.js","mtime":1575538847000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zZXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJEOlxcMU5vZGUuanNcdTlBRDhcdTdFQTdcdThENDRcdTY1OTlcXGRpc3RcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0IHsgZ2V0SW5mb0FuZExpc3RCeUlkIGFzIF9nZXRJbmZvQW5kTGlzdEJ5SWQgfSBmcm9tICJAL3NlcnZpY2VzL2luZGV4IjsKdmFyIHN0YXRlID0gewogIGNhckxpc3Q6IHt9LAogIGN1cnJlbnQ6ICLlhajpg6giLAogIHllYXI6IFsi5YWo6YOoIl0sCiAgY3VycmVudExpc3Q6IFtdCn07IC8v57uZ6L2m5qy+5o6S5bqPCgpmdW5jdGlvbiBzb3J0Q2FyTGlzdChsaXN0KSB7CiAgbGlzdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICBpZiAoYS5leGhhdXN0X3N0ciA9PSBiLmV4aGF1c3Rfc3RyKSB7CiAgICAgIGlmIChhLm1heF9wb3dlcl9zdHIgPT0gYi5tYXhfcG93ZXJfc3RyKSB7CiAgICAgICAgcmV0dXJuIGIuaW5oYWxlX3R5cGUgPiBhLmluaGFsZV90eXBlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBhLm1heF9wb3dlciAtIGIubWF4X3Bvd2VyOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gYS5leGhhdXN0IC0gYi5leGhhdXN0OwogICAgfQogIH0pOwogIHJldHVybiBsaXN0Owp9IC8v5qC85byP5YyW5pWw5o2uCgoKZnVuY3Rpb24gZm9ybWF0Q2FyTGlzdChsaXN0KSB7CiAgbGlzdCA9IGxpc3QubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICBpdGVtLmtleSA9ICIiLmNvbmNhdChpdGVtLmV4aGF1c3Rfc3RyLCAiLyIpLmNvbmNhdChpdGVtLm1heF9wb3dlcl9zdHIsICIgIikuY29uY2F0KGl0ZW0uaW5oYWxlX3R5cGUpOwogICAgcmV0dXJuIGl0ZW07CiAgfSk7CiAgdmFyIG5ld0xpc3QgPSBbXTsKICBsaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgIHZhciBpbmRleCA9IG5ld0xpc3QuZmluZEluZGV4KGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUua2V5ID09IGl0ZW0ua2V5OwogICAgfSk7CgogICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICBuZXdMaXN0W2luZGV4XS5saXN0LnB1c2goaXRlbSk7CiAgICB9IGVsc2UgewogICAgICBuZXdMaXN0LnB1c2goewogICAgICAgIGtleTogaXRlbS5rZXksCiAgICAgICAgbGlzdDogW2l0ZW1dCiAgICAgIH0pOwogICAgfQogIH0pOwogIHdpbmRvdy5jb25zb2xlLmxvZyhzdGF0ZS5jdXJyZW50TGlzdCk7CiAgcmV0dXJuIG5ld0xpc3Q7Cn0KCnZhciBtdXRhdGlvbnMgPSB7CiAgdXBkYXRlSW5mb0FuZExpc3RCeUlkOiBmdW5jdGlvbiB1cGRhdGVJbmZvQW5kTGlzdEJ5SWQoc3RhdGUsIHBheWxvYWQpIHsKICAgIHN0YXRlLmNhckxpc3QgPSBwYXlsb2FkLmRhdGE7IC8vIOaLv+WIsOW5tOS7vQoKICAgIHZhciB5ZWFyID0gcGF5bG9hZC5kYXRhLmxpc3QubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgIHJldHVybiBpdGVtLm1hcmtldF9hdHRyaWJ1dGUueWVhcjsKICAgIH0pOwogICAgc3RhdGUueWVhciA9IFsi5YWo6YOoIl07CiAgICBzdGF0ZS55ZWFyID0gX3RvQ29uc3VtYWJsZUFycmF5KG5ldyBTZXQoc3RhdGUueWVhci5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG5ldyBTZXQoeWVhcikpKSkpOyAvLyDmi7/liLDlvZPliY3pgInmi6nlubTku73nmoTmlbDmja4KCiAgICB2YXIgY3VycmVudExpc3QgPSBbXTsKCiAgICBpZiAoc3RhdGUuY3VycmVudCA9PSAi5YWo6YOoIikgewogICAgICBjdXJyZW50TGlzdCA9IHBheWxvYWQuZGF0YS5saXN0OwogICAgfSBlbHNlIHsKICAgICAgY3VycmVudExpc3QgPSBwYXlsb2FkLmRhdGEubGlzdC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbS5tYXJrZXRfYXR0cmlidXRlLnllYXIgPT0gc3RhdGUuY3VycmVudDsKICAgICAgfSk7CiAgICB9IC8vIOe7meW9k+WJjeW5tOS7veaVsOaNruaOkuW6jwoKCiAgICBjdXJyZW50TGlzdCA9IHNvcnRDYXJMaXN0KGN1cnJlbnRMaXN0KTsKICAgIGN1cnJlbnRMaXN0ID0gZm9ybWF0Q2FyTGlzdChjdXJyZW50TGlzdCk7CiAgICBzdGF0ZS5jdXJyZW50TGlzdCA9IGN1cnJlbnRMaXN0OwogICAgd2luZG93LmNvbnNvbGUubG9nKHN0YXRlLmN1cnJlbnRMaXN0KTsKICB9LAogIHNldEN1cnJlbnQ6IGZ1bmN0aW9uIHNldEN1cnJlbnQoc3RhdGUsIHBheWxvYWQpIHsKICAgIHN0YXRlLmN1cnJlbnQgPSBwYXlsb2FkOwogIH0KfTsKdmFyIGFjdGlvbnMgPSB7CiAgZ2V0SW5mb0FuZExpc3RCeUlkOiBmdW5jdGlvbiBnZXRJbmZvQW5kTGlzdEJ5SWQoX3JlZiwgcGF5bG9hZCkgewogICAgdmFyIGNvbW1pdCwgcmVzOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBnZXRJbmZvQW5kTGlzdEJ5SWQkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoX2dldEluZm9BbmRMaXN0QnlJZChwYXlsb2FkKSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBjb21taXQoInVwZGF0ZUluZm9BbmRMaXN0QnlJZCIsIHJlcyk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0KfTsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHN0YXRlLAogIG11dGF0aW9uczogbXV0YXRpb25zLAogIGFjdGlvbnM6IGFjdGlvbnMKfTs="},{"version":3,"sources":["D:/1Node.js高级资料/dist/src/store/modules/car.js"],"names":["getInfoAndListById","state","carList","current","year","currentList","sortCarList","list","sort","a","b","exhaust_str","max_power_str","inhale_type","max_power","exhaust","formatCarList","map","item","key","newList","forEach","index","findIndex","value","push","window","console","log","mutations","updateInfoAndListById","payload","data","market_attribute","Set","concat","filter","setCurrent","actions","commit","res","namespaced"],"mappings":"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","sourcesContent":["import {\r\n    getInfoAndListById\r\n} from \"@/services/index\"\r\n\r\nconst state = {\r\n    carList: {},\r\n    current: \"全部\",\r\n    year: [\"全部\"],\r\n    currentList: []\r\n}\r\n//给车款排序\r\nfunction sortCarList(list) {\r\n    list.sort((a, b)=>{\r\n        if (a.exhaust_str == b.exhaust_str){\r\n            if (a.max_power_str == b.max_power_str){\r\n                return b.inhale_type > a.inhale_type;\r\n            }else{\r\n                return a.max_power - b.max_power;\r\n            }\r\n        }else{\r\n            return a.exhaust - b.exhaust;\r\n        }\r\n    })\r\n    return list;\r\n}\r\n//格式化数据\r\nfunction formatCarList(list) {\r\n    list = list.map(item => {\r\n        item.key = `${item.exhaust_str}/${item.max_power_str} ${item.inhale_type}`;\r\n        return item\r\n    })\r\n    let newList = [];\r\n    list.forEach(item => {\r\n        let index = newList.findIndex(value => value.key == item.key)\r\n        if (index !== -1) {\r\n            newList[index].list.push(item)\r\n        } else {\r\n            newList.push({\r\n                key: item.key,\r\n                list: [item]\r\n            })\r\n        }\r\n    })\r\n    window.console.log(state.currentList)\r\n    return newList\r\n}\r\nconst mutations = {  \r\n    updateInfoAndListById(state, payload) {\r\n        state.carList = payload.data\r\n        // 拿到年份\r\n        let year = payload.data.list.map(item => item.market_attribute.year);\r\n        state.year=[\"全部\"]\r\n        state.year = [...new Set(state.year.concat([...new Set(year)]))]\r\n        // 拿到当前选择年份的数据\r\n        let currentList = [];\r\n        if (state.current == \"全部\") {\r\n            currentList = payload.data.list\r\n        } else {\r\n            currentList = payload.data.list.filter(item => item.market_attribute.year == state.current)\r\n        }\r\n        // 给当前年份数据排序\r\n        currentList = sortCarList(currentList)\r\n        currentList = formatCarList(currentList)\r\n        state.currentList = currentList\r\n        window.console.log(state.currentList)\r\n    },\r\n    setCurrent(state,payload){\r\n        state.current=payload\r\n    }\r\n}\r\nconst actions = {\r\n    async getInfoAndListById({\r\n        commit\r\n    }, payload) {\r\n        let res = await getInfoAndListById(payload)\r\n        commit(\"updateInfoAndListById\", res)\r\n    }\r\n}\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    mutations,\r\n    actions\r\n}"]}]}